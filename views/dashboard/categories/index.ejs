<%- include('../../partials/header.ejs', { title: title }) %>

<div class="page-content">
  <!-- Main sidebar -->
  <%- include('../../partials/sidebar.ejs') %>
  <!-- /main sidebar -->

  <!-- Main content -->
  <div class="content-wrapper">
    <!-- Main navbar -->
    <%- include('../../component/dashboard/navbar.ejs') %>
    <!-- /main navbar -->

    <!-- Inner content -->
    <div class="content-inner">

      <!-- Content category -->
      <div class="content">
        <!-- Nested object data -->
        <div class="card">
          <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
              <h5 class="mb-0"><%= title %></h5>
              <!-- Button to trigger modal -->
              <button type="button" class="btn btn-light" data-bs-toggle="modal" data-bs-target="#add-category-model">
                Add category<i class="ph ph-navigation-arrow ms-2"></i>
              </button>
            </div>
          </div>
   <!-- Hidden element to pass JSON data to the JavaScript file -->
  
          <table class="table datatable-nested">
            <thead>
              <tr>
                <th>Category</th>
                <th>Customers</th>
                <th>Status</th>

              </tr>
            </thead>
            <tbody>
              <!-- Data will be dynamically injected here -->
            </tbody>
          </table>
        
        </div>
        <!-- /nested object data -->

      </div>
      <!-- /content category -->
    </div>
    <!-- /inner content -->
  </div>
  <!-- /main content -->
</div>
<!-- /page content -->

<!-- Models -->
<!-- Add Category Modal -->
<div id="add-category-model" class="modal fade" tabindex="-1" style="display: none;" aria-hidden="true">
  <div class="modal-dialog modal-full">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add Category</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="add-category-form">
         
          <!-- Category Basic Information -->
          <div class="form-section mb-4">
            <div class="row">
              <!-- Category Name -->
              <div class="col-md-4">
                <div class="mb-3">
                  <label for="category_name" class="form-label">Category Name*</label>
                  <input type="text" id="category_name" class="form-control" name="category_name" minlength="4"
                  maxlength="20" pattern="^(?=.*[A-Z])(?=.*[a-z])[A-Za-z0-9\s]+$" required>
                  <small class="form-text text-muted">As per official documents</small>
                  <div id="category_name_error" class="invalid-feedback">Category with the same name already exists.</div>
                </div>
              </div>

              <!-- Customer Selection -->
              <div class="col-md-6">
                <div class="mb-3">
                  <label class="form-label">Select Customers</label>
                  <button type="button" class="btn btn-link">Add New Customer</button>
                  <select id="customer_ids" class="form-control multiselect" multiple="multiple" name="customer_ids"
                    data-enable-filtering="true" data-enable-case-insensitive-filtering="true" >
                    <% customers.forEach(function(item) { %>
                      <option value="<%= item.customerId %>">
                        <%= item.customerName %>
                      </option>
                    <% }) %>
                  </select>
                  <small class="form-text text-muted">Select the applicable customer(s)</small>
                </div>
              </div>

            </div>
          </div>

          <!-- Form Submission -->
          <div class="mb-4">
            <button type="submit" class="btn btn-success">Add Category</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Edit Category Modal -->
<div id="edit-category-model" class="modal fade" tabindex="-1" style="display: none;" aria-hidden="true">
  <div class="modal-dialog modal-full">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Category</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <form id="edit-category-form">
         
          <!-- Category Basic Information -->
          <div class="form-section mb-4">
            <div class="row">
              <!-- Category Name -->
              <div class="col-md-4">
                <div class="mb-3">
                  <label for="edit_category_name" class="form-label">Category Name*</label>
                  <input type="text" id="edit_category_name" class="form-control" name="edit_category_name" minlength="4"
                  maxlength="20" pattern="^(?=.*[A-Z])(?=.*[a-z])[A-Za-z0-9\s]+$" required>
                  <small class="form-text text-muted">As per official documents</small>
                  <div id="category_name_error" class="invalid-feedback">Category with the same name already exists.</div>
                </div>
              </div>

              <!-- Customer Selection -->
              <div class="col-md-6">
                <div class="mb-3">
                  <label class="form-label">Select Customers</label>
                  <button type="button" class="btn btn-link">Add New Customer</button>
                  <select id="edit_customer_ids" class="form-control multiselect" multiple="multiple" name="edit_customer_ids"
                    data-enable-filtering="true" data-enable-case-insensitive-filtering="true" >
                    <% customers.forEach(function(item) { %>
                      <option value="<%= item.customerId %>">
                        <%= item.customerName %>
                      </option>
                    <% }) %>
                  </select>
                  <small class="form-text text-muted">Select the applicable customer(s)</small>
                </div>
              </div>

            </div>
          </div>

          <!-- Form Submission -->
          <div class="mb-4">
            <button type="submit" class="btn btn-success">Update</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>


<script>
  // Function to render area table
function renderAreaTable() {
    renderTable({
        tableClassName: '.datatable-nested', 
        apiURl: '/api/categories', 
        columns: [
            { data: "categoryName" },
            {
                data: "customers", 
                render: function (data, type, row) {
                    if (Array.isArray(data) && data.length > 0) {
                        // Join customer names into a single string
                        
                        return data.map(customer => customer.customerName).join(', ');
                    } else {
                        return 'No Customers';
                    }
                }
            },
            {
                data: null,
                className: "text-center",
                render: function (data, type, row) {
                    return `
                    <button type="button" class="btn btn-primary btn-sm" 
                            onclick="setData('${row.categoryId}','${row.categoryName}')">
                        <i class="ph ph-pencil"></i>
                    </button>
                    <button type="button" class="btn btn-danger btn-sm ms-2" 
                            onclick="deleteData('${row.categoryId}','${row.categoryName}')">
                        <i class="ph ph-trash"></i>
                    </button>
                `;
                }
            }
        ]
    });
}

// Function to handle adding a new area
function addCategory() {
    $('#add-category-form').on('submit', function (e) {
        e.preventDefault();  
        const formData = new FormData(this);

        ajaxRequest('/api/category/create', 'POST', formData, function(response) {
            $('#add-category-model').modal('hide');
            showSuccessToast(`Category "${formData.get('category_name')}" added successfully!`);
            setTimeout(() => location.reload(), 1500);
        }, function(xhr) {
            console.error('Error adding category:', xhr);
            const response = JSON.parse(xhr.responseText);
            handleErrorResponse(response);
        });
    });
}

// Function to handle error responses
function handleErrorResponse(response) {
  $('#category_name_error').addClass('invalid-feedback');
    if (response.message === "category-found") {
        $('#category_name_error').removeClass('invalid-feedback');
    }
}

// Function to populate the category form
function populateDataForm(id) {
    const updateModel = new bootstrap.Modal(document.getElementById('edit-category-model'));
    updateModel.show();

    ajaxRequest(`/api/category/${id}`, 'GET', null, function(response) {
        const category = response.data;
        $('#edit_category_name').val(category.categoryName);
     

        const customerIds = category.customers.map(customer => customer.customerId);
        $('#edit_customer_ids').val(customerIds);
        $('#edit_customer_ids').multiselect('refresh');
    }, function(xhr) {
        console.error('Error fetching category details:', xhr);
    });
}

// Function to handle the edit request and form submission
function setData(id, categoryName) {
    populateDataForm(id); 

    // Use .off() to remove any previous event listeners to avoid multiple bindings
    $('#edit-category-form').off('submit').on('submit', function (e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        ajaxRequest(`/api/category/update/${id}`, 'PUT', formData, function(response) {
            $('#edit-category-model').modal('hide');
            showSuccessToast(`Categories "${formData.get('edit_category_name')}" updated successfully!`);
            setTimeout(() => location.reload(), 1500);
        }, function(xhr) {
            console.error('Error:', xhr);
            const response = JSON.parse(xhr.responseText);
            handleErrorResponse(response);
        });
    });
}

// Main function to handle delete request
function deleteData(id, categoryName) {
    if (!id) {
        alert("Invalid ID for deletion.");
        return;
    }

    // Show confirmation modal with the category name
    showDeleteConfirmationModal(categoryName, () => {
        ajaxRequest(`/api/category/delete/${id}`, 'DELETE', null, function(response) {
            if (response.success) {
                showSuccessToast(`Category "${categoryName}" deleted successfully!`);
                setTimeout(() => location.reload(), 1500);
            } else {
                alert('Error: ' + response.message);
            }
        }, function(xhr) {
            console.error('Error deleting data:', xhr);
            alert('Failed to delete data. Please try again.');
        });
    });
}



// Initialize the area table and bind add area function
$(document).ready(function() {
    renderAreaTable();
    addCategory();
});
</script>
<%- include('../../partials/footer.ejs') %>